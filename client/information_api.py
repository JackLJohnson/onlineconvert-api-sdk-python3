#!/usr/bin/env python
"""
InformationApi.py
Copyright 2015 SmartBear Software

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

NOTE: This class is auto generated by the swagger code generator program. Do not edit the class manually.
"""
import sys
import os

from .models import *


class InformationApi(object):

    def __init__(self, apiClient):
      self.apiClient = apiClient

    
    
    def conversions_get(self, **kwargs):
        """Get a list of the valid conversions.
        Gets a list of the valid conversions that can be made with the API. For each conversion is also shown the available options for that specific type of conversion.\n\nThis conversions can be added to a Job through the specific endpoint or in the information given to create the new Job.\n

        Args:
            category, str: Category for the conversion. (required)
            target, str: Target for for the conversion. (required)
            page, number: Pagination for list of elements. (required)
            

        Returns: list[Conversion]
        """

        allParams = ['category', 'target', 'page']

        params = locals()
        for (key, val) in params['kwargs'].items():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method conversions_get" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/conversions'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}

        
        if ('category' in params):
            queryParams['category'] = self.apiClient.toPathValue(params['category'])
        
        if ('target' in params):
            queryParams['target'] = self.apiClient.toPathValue(params['target'])
        
        if ('page' in params):
            queryParams['page'] = self.apiClient.toPathValue(params['page'])
        

        

        

        postData = (params['body'] if 'body' in params else None)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'list[Conversion]')
        return responseObject
        
        
        
    
    def statuses_get(self, **kwargs):
        """Get a list of the valid statuses.
        The endpoint provide a list of all available status that the Job may have during the process as a description of the status.

        Args:
            

        Returns: list[Status]
        """

        allParams = []

        params = locals()
        for (key, val) in params['kwargs'].items():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method statuses_get" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/statuses'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}

        

        

        

        postData = (params['body'] if 'body' in params else None)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'list[Status]')
        return responseObject
        
        
        
    


